Interpreter
    - executes program in source language
    - easier to write
    - compiler 
        makes hard to reverse engineer
Translator
    - more efficient
    - look at program once
    - translate down to a lower level
    - just runs
    - no compiler
    - no linking
    - no loading
    - interpreter must run the code every time
        => usually slower by about a factor of 100

Compilation
    Input   => high-level code
    Output  => Assembly language code

Assemblr
    Input   => Assembly language
    Output  => Object Code (exampleFile.o)
    - reads and uses DIRECTIVES
        Instructions to assembler about what to do with code
    - replaces pseudoinstruction
    - Produce machine code
    - Creates OBJECT FILE 
DIRECTIVES example:
    - begin with a dot (.)
    .text
    .data
    .globl sym
        - functions
        - you want to export label to use in other files
    .asciiz str
        - initializing data in static data section
        - string data will be present
        - labels must be added beforehand
    .word w1...wn

    