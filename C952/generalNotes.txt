Pipelining Hazards
******************************
Hazards 
    prevents starting an instruction immediately in next cycle

3 categories:
    structural Hazards
        two instructions fighting over same hardware
    
    data hazard 
        one instruction needs instruction that previous one hasn't produced yet
    
    control hazard 
        branch instruction doesn't let know what next instruction is


Structual hazards
    conflict of resource
    - if only had a single memory?
        problem if load/store while instruction fetch (use memory at same time)
            STALL must occur
    - easiest to solve:
        throw more hardware. Can always remove or add more hardware.
    - solutions
        1) split regfile into two
        2) build regfile with independent read and write ports
Conclusion: Read and Write to registers during same clock cycle is okay
All about hardware


Data Hazards
    a value in previous instruction is needed to continue
    