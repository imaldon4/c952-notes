4 way associative caches

Trade off:
    Fixed size (doubling by factor 2)
        - you halve number of sets
            - set index gets smaller by one bit
        
Cost of Set-associative caches
    - mux delay
        Don't know which piece of data until tag compare

Cache replacement Policies
    Kicking out the old one
        - random replacement
            - if you guess wrong it will come back in to the cache anyway
            - will avoid any pathological case for patterns or loops
            - performance programmers hate this because hard to figure out issues
    
LRU (Least Recently Used)
    Find something not most recently used and kick out
    Use a pointer sometimes