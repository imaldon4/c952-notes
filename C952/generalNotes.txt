Producing Machine Language
******************************
Simple case
    - arithmetic, logical, shifts
Branch
    - PC-relative

"Forward Reference"
    - 2 passes usually in assembly Language

Jumps and Jump and Link (j and jal)
    Require absolute address
        But don't know where you are going to jump to.
    These need absolute address because they are farther and can't
    be guessed.
    Dont' know where jumping to, so need an absolute address.

Static Data
    Don't know that actual 32 bit address until later.
    
Do as much as you can in machine code.

Symbol Table
******************************
    List of "items"

Relocation Table  
    - items
    - labels jumped to (j or jal)
        internal
        external (lib files too)
    - any piece of static section (la instruction)

Object File Format
******************************
    - object file header
    - text segment
    - data segment
    - relocation information
    - symbol table 
    - debugging information
ELF (executable linker format)

linker
****************************** 
    - brings in standard libraries
    Input => Object code files 
    Output => executable code (a.out)
    - incremental compilation
        just need to compile that one file, not everything
    - takes text.o, data.o, file.o and resolves them into a single a.out file (executable)

Four Types of Addresses
******************************
PC-Relative addressing (beq, bne)
    never relocate

Absolute Addresses in MIPS
******************************
J-format:
j/jal | xxxxx

Load and store
lw/sw | $gp | $x | address 

conditional branches
beq/bne | $rs | $rs | address


Resolving references 
******************************
Linker assumes first text segment is address 0x04000000
Linker knows
    - length of text and data segment
    - ordering of text and data segments
Linker calculates
    - absolute address of each label to be jumped to

To resolve references
Output => executable file 


Loader Basics
******************************
Input   => executable code 
Output  => program is run

What does it do?
    - reads executable header
    - create new address space
    - init stack
    - init machine register
    - jump to start of 'main' routine
